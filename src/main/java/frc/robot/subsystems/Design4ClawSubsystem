// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.smartdashboard.*;
import frc.robot.Constants.RobotConstants;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.Solenoid;
import com.ctre.phoenix.sensors.PigeonIMU;
import com.ctre.phoenix.motorcontrol.can.TalonFX;
import edu.wpi.first.wpilibj.DigitalSource;


public class Design4ClawSubsystem extends SubsystemBase {
  public boolean gripped = false;
  public boolean IsInScoringPosition=false;
  public boolean IsInReceivingPosition= false;
  public boolean isGripped= false;
  Solenoid gripper = new Solenoid(PneumaticsModuleType.REVPH, 6); //The pneumatics hub channels that we are using are 0, 2, and 5
  Solenoid clawTilter= new Solenoid(PneumaticsModuleType.REVPH, 9);
  TalonFX rotator= new TalonFX(9);
  DigitalInput CoralDetector= new DigitalInput(0);
  public boolean hasCoral=CoralDetector.get();
  /** Creates a new ExampleSubsystem. */
  public Design4ClawSubsystem() {}

  /**
   * An example method querying a boolean state of the subsystem (for example, a digital sensor).
   *
   * @return the opposite of the value of said boolean state.
   */
  public void ClawGrip() {
    gripper.setPulseDuration(1.0);
    gripper.set(coralDetector.get());
  }
  public void letGo(){
    gripper.setPulseDuration(1.0);
    gripper.set(false);
  }
  public void clawSpinner(){
    double motorTurnAmount= angleToEncoderTicks(90);
    rotator.set(ControlMode.position, motorTurnAmount);
  }
  public void clawTilter() {
    clawTilter.setPulseDuration(1.0);
    clawTilter.set(true);
  }
  public void clawUntilter(){
    clawTilter.setPulseDuration(1.0);
    clawTilter.set(false);
  }
  public void clawUnspinner(){
    rotator.set(ControlMode.Position, -motorTurnAmount);
  }

  public void scoringPositionJourney() {
    clawSpinner();
    clawTilter();
    IsInScoringPosition=true;
  }
  public void getBackToReceivingPositionJourney(){
    clawUntilter();
    clawUnspinner();
    IsInReceivingPosition=true;
  }
  public boolean IsInScoringPosition(){
    return IsinScoringPosition;
  }
  public boolean IsItInReceivingPosition(){
    return IsInReceivingPosition;
  }
  public boolean IsItGripped(){
    return isGripped;
  }

  public void score() {
    try {
      Thread.sleep(RobotConstants.kScoreTimeoutSeconds);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
    }

    hasCoral = false;
  }

  public void getBackToReceivingPosition() {
    UnrotateArmWrist();
    inScoringPosition = false;
  }

  @Override
  public void periodic() {
    SmartDashboard.putBoolean("Has Coral?", hasCoral);
    SmartDashboard.putBoolean("In Scoring Position?", inScoringPosition);
  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run during simulation
  }
}
